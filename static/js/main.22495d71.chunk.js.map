{"version":3,"sources":["logo.svg","Data.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","state","name","data1","data2","handleChange","bind","handleSubmit","axios","get","then","data","console","log","setState","event","cName","target","className","this","value","post","date","Date","now","response","error","preventDefault","alert","onSubmit","type","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,kKCyE5BC,E,YApEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,GACNC,MAAO,GACPC,MAAO,IAGT,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATH,E,iFAYE,IAAD,OAClBE,IAAMC,IAAI,sDACPC,KAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZZ,KAAMS,EAAKA,KAAKT,KAChBC,MAAOQ,EAAKA,KAAKR,MACjBC,MAAOO,EAAKA,KAAKP,Y,mCAKZW,GACX,IAAIC,EAAQD,EAAME,OAAOC,UACzBC,KAAKL,SAAL,eAAgBE,EAAQD,EAAME,OAAOG,U,mCAG1BL,GACXH,QAAQC,IAAI,2BACZL,IAAMa,KAAK,qDAAsD,CAC/DnB,KAAMiB,KAAKlB,MAAMC,KACjBC,MAAOgB,KAAKlB,MAAME,MAClBC,MAAOe,KAAKlB,MAAMG,MAClBkB,KAAMC,KAAKC,QAEZd,KAAK,SAAUe,GACdb,QAAQC,IAAIY,KAEbf,KAAM,SAAUgB,GACfd,QAAQC,IAAIa,KAEdX,EAAMY,iBACNC,MAAM,2C,+BAIN,OACE,0BAAMV,UAAU,eAAeW,SAAUV,KAAKZ,cAC5C,uCAEE,2BAAOW,UAAU,OAAOY,KAAK,OAAOV,MAAOD,KAAKlB,MAAMC,KAAM6B,SAAUZ,KAAKd,gBAE7E,6CAEE,2BAAOa,UAAU,QAAQY,KAAK,OAAOV,MAAOD,KAAKlB,MAAME,MAAO4B,SAAUZ,KAAKd,gBAE/E,6CAEE,2BAAOa,UAAU,QAAQY,KAAK,OAAOV,MAAOD,KAAKlB,MAAMG,MAAO2B,SAAUZ,KAAKd,gBAE/E,2BAAOa,UAAU,cAAcY,KAAK,SAASV,MAAM,c,GA/DxCY,IAAMC,W,MCUVC,MATf,WACE,OACE,yBAAKhB,UAAU,OACb,6EACA,kBAAC,EAAD,QCGciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC,gB","file":"static/js/main.22495d71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      data1: '',\n      data2: ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get(\"https://webhooks-test-696969.herokuapp.com/newdata\")\n      .then (data => {\n        console.log(data);\n        this.setState({\n          name: data.data.name,\n          data1: data.data.data1,\n          data2: data.data.data2\n        })\n      })\n  }\n\n  handleChange(event) {\n    let cName = event.target.className;\n    this.setState({[cName]: event.target.value});\n  }\n\n  handleSubmit(event) {\n    console.log(\"some shit was submitted\");\n    axios.post(\"https://webhooks-test-696969.herokuapp.com/newdata\", {\n      name: this.state.name,\n      data1: this.state.data1,\n      data2: this.state.data2,\n      date: Date.now()\n    })\n    .then(function (response) {\n      console.log(response);\n    })\n    .then (function (error) {\n      console.log(error);\n    })\n    event.preventDefault();\n    alert(\"congratulations! your shit was saved.\")\n  }\n\n  render() {\n    return (\n      <form className=\"verticalForm\" onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input className=\"name\" type=\"text\" value={this.state.name} onChange={this.handleChange} />\n        </label>\n        <label>\n          DataThing1:\n          <input className=\"data1\" type=\"text\" value={this.state.data1} onChange={this.handleChange} />\n        </label>\n        <label>\n          DataThing2:\n          <input className=\"data2\" type=\"text\" value={this.state.data2} onChange={this.handleChange} />\n        </label>\n        <input className=\"input-thing\" type=\"submit\" value=\"Save\" />\n      </form>\n    );\n  }\n}\n\nexport default Form;","import React from 'react';\nimport Form from './Data.js';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>All the Data you need and none that you don't</h1>\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}